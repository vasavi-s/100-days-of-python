Get the Data
Either use the provided .csv file or (optionally) get fresh (the freshest?) data from running an SQL query on StackExchange:

Follow this link to run the query from StackExchange to get your own .csv file

select dateadd(month, datediff(month, 0, q.CreationDate), 0) m, TagName, count(*) from PostTags pt join Posts q on q.Id=pt.PostId join Tags t on t.Id=pt.TagId where TagName in ('java','c','c++','python','c#','javascript','assembly','php','perl','ruby','visual basic','swift','r','object-c','scratch','go','swift','delphi') and q.CreationDate < dateadd(month, datediff(month, 0, getdate()), 0) group by dateadd(month, datediff(month, 0, q.CreationDate), 0), TagName order by dateadd(month, datediff(month, 0, q.CreationDate), 0)
Import Statements
[1]
0s
import pandas as pd
import matplotlib.pyplot as plt
Data Exploration
Challenge: Read the .csv file and store it in a Pandas dataframe

[5]
0s

df = pd.read_csv('/content/2.1 QueryResults.csv', names=['DATE', 'TAG', 'POSTS'], header=0)
Challenge: Examine the first 5 rows and the last 5 rows of the of the dataframe

[6]
0s
df.head()

[7]
0s
df.tail()

Challenge: Check how many rows and how many columns there are. What are the dimensions of the dataframe?

[8]
0s
df.shape
(1991, 3)
Challenge: Count the number of entries in each column of the dataframe

[9]
0s
df.count()
DATE     1991
TAG      1991
POSTS    1991
dtype: int64
Challenge: Calculate the total number of post per language. Which Programming language has had the highest total number of posts of all time?

[10]
0s
df.groupby('TAG').sum()

Some languages are older (e.g., C) and other languages are newer (e.g., Swift). The dataset starts in September 2008.

Challenge: How many months of data exist per language? Which language had the fewest months with an entry?

[11]
0s
df.groupby("TAG").count()

Data Cleaning
Let's fix the date format to make it more readable. We need to use Pandas to change format from a string of "2008-07-01 00:00:00" to a datetime object with the format of "2008-07-01"

[12]
0s
df.DATE[1]

[13]
0s
type(df.DATE[1])
str
[14]
0s
print(pd.to_datetime(df.DATE[1]))
type(pd.to_datetime(df.DATE[1]))
2008-08-01 00:00:00
pandas._libs.tslibs.timestamps.Timestamp
[15]
0s
df.DATE = pd.to_datetime(df.DATE)
df.head()

Data Manipulation
[16]
0s
reshaped_df = df.pivot(index='DATE', columns='TAG', values='POSTS')
Challenge: What are the dimensions of our new dataframe? How many rows and columns does it have? Print out the column names and print out the first 5 rows of the dataframe.

[17]
0s
reshaped_df.shape
(145, 14)
[19]
0s
reshaped_df.columns
Index(['assembly', 'c', 'c#', 'c++', 'delphi', 'go', 'java', 'javascript',
       'perl', 'php', 'python', 'r', 'ruby', 'swift'],
      dtype='object', name='TAG')
[20]
0s
reshaped_df.head()

Challenge: Count the number of entries per programming language. Why might the number of entries be different?

[21]
0s
reshaped_df.count()
TAG
assembly      144
c             144
c#            145
c++           144
delphi        144
go            129
java          144
javascript    144
perl          144
php           144
python        144
r             142
ruby          144
swift         135
dtype: int64
[22]
0s
reshaped_df.fillna(0, inplace=True)
reshaped_df.fillna(0, inplace=True)
[23]
0s
reshaped_df.head()

[24]
0s
reshaped_df.isna().values.any()
False
Data Visualisaton with with Matplotlib
Challenge: Use the matplotlib documentation to plot a single programming language (e.g., java) on a chart.

[25]
0s
plt.plot(reshaped_df.index, reshaped_df["java"])

[26]
0s
plt.figure(figsize=(16,10))
plt.xlabel("Date", fontsize=14)
plt.ylabel("Number of posts", fontsize=14)
plt.ylim(0, 35000)
plt.plot(reshaped_df.index, reshaped_df.java)

Challenge: Show two line (e.g. for Java and Python) on the same chart.

[27]
1s
plt.figure(figsize=(16,10))
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.xlabel("Date", fontsize=14)
plt.ylabel("Number of posts", fontsize=14)
plt.ylim(0, 35000)
plt.plot(reshaped_df.index, reshaped_df.java)
plt.plot(reshaped_df.index, reshaped_df.python)

[32]
1s
plt.figure(figsize=(16,10))
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.xlabel("Date", fontsize=14)
plt.ylabel("Number of posts", fontsize=14)
plt.ylim(0, 35000)

for column in reshaped_df.columns:
  plt.plot(reshaped_df.index, reshaped_df[column])


Smoothing out Time Series Data
Time series data can be quite noisy, with a lot of up and down spikes. To better see a trend we can plot an average of, say 6 or 12 observations. This is called the rolling mean. We calculate the average in a window of time and move it forward by one overservation. Pandas has two handy methods already built in to work this out: rolling() and mean().

[33]
1s
    plt.plot(reshaped_df.index, reshaped_df[column], 
             linewidth=3, label=reshaped_df[column].name)

plt.legend(fontsize=16) 
